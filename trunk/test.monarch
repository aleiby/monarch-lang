//x = 4 + 5 - 6;

//x = a && b ? c ? d : e : f && f0 ? g && g0 : h && h0;

/*
x = y = 10;
x *= 2;
y /= 2;
print x;
print y;
*/

//x = 1 + 2 * 3 + 1;
//print x;

/*
x = 11;
if ( x < 10 )
{
	x = 0;
}
else
{
	x = 20;
}
*/

//x = true ? 10 : 20;

//do { --x; }
//while (x > 5);

//while (x > 5) { --x; }

/*
for (x = 0; x < 10; ++x)
{
	if (x < 3)
		continue;
	
	print x;
	
	if (x == 5)
		break;
}
*/

// to support nested functions (references to outer vars),
// we will need to package them in a struct and pass in a pointer
// to the inner function(s) - similar to the 'this' pointer for members.
// this might require a first pass to collect up all vars for a given
// scope so we can identify which need to be specially packaged.

//x = 100;

/*
test = function Test()
{
	print 200;
};

test();
*/

myarray = [];

myarray[0] = 99;

print myarray[0];

/*

print x; // x should not exist in this scope (only assignments/lvalues should create vars?)

if (x > 0)
	if (x > 100)
		x = 200;
	else
		x = 300;
	
print x;

*/

// - need support for functions and arrays so we can keep old tests around and ensure they don't break.


// - arrays - use ANTLR3_VECTOR - expose add/new/get like print
// store in symbol table as LLVMValeRef pointer - elements are LLVMValeRefs (from symbol table - functions, ints, etc.)

// todo:
// index into arrays (auto-size?)
// allow += operator on arrays? (to push_back)

